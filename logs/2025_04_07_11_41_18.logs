root INFO - 07/04/2025 11:41:18 AM : Connected to broker
kafka.consumer.subscription_state INFO - 07/04/2025 11:41:18 AM : Updated partition assignment: [TopicPartition(topic='optimalPlans', partition=0)]
kafka.conn INFO - 07/04/2025 11:41:18 AM : <BrokerConnection node_id=1001 host=localhost:9092 <connecting> [IPv6 ('::1', 9092, 0, 0)]>: connecting to localhost:9092 [('::1', 9092, 0, 0) IPv6]
kafka.conn INFO - 07/04/2025 11:41:18 AM : <BrokerConnection node_id=1001 host=localhost:9092 <connecting> [IPv6 ('::1', 9092, 0, 0)]>: Connection complete.
kafka.conn INFO - 07/04/2025 11:41:18 AM : <BrokerConnection node_id=bootstrap-0 host=localhost:9092 <connected> [IPv6 ('::1', 9092, 0, 0)]>: Closing connection. 
root INFO - 07/04/2025 11:42:40 AM : Received optimal plan -> ['students_grades_source.json', {'associated_key': None}, {'standardiseFeatures': '```python\n{\n    ("Total_Score",): ("student_total_score",),\n    ("Stress_Level (1-10)",): ("Stress_Level (1-10)",),\n    ("Gender",): ("student_gender",),\n    ("Student_ID",): ("student_id",),\n    ("Age",): ("student_age",),\n    ("Assignments_Avg",): ("assignments_avg",),\n    ("Midterm_Score",): ("midterm_score",),\n    ("Final_Score",): ("final_score",),\n    ("First_Name", "Last_Name"): ("full_name",),\n    ("Projects_Score",): ("projects_score",),\n    ("Family_Income_Level",): ("Family_Income_Level",),\n    ("Sleep_Hours_per_Night",): ("Sleep_Hours_per_Night",),\n    ("Email",): ("student_email",),\n    ("Parent_Education_Level",): ("Parent_Education_Level",),\n    ("Attendance (%)",): ("attendance_percent",),\n    ("Study_Hours_per_Week",): ("weekly_study_hours",),\n    ("Quizzes_Avg",): ("quizzes_avg",),\n    ("Department",): ("dept",),\n    ("Extracurricular_Activities",): ("takes_extracurriculars",),\n    ("Grade",): ("grade",),\n    ("Internet_Access_at_Home",): ("has_home_internet",),\n    ("Participation_Score",): ()\n}\n```'}, 'missingValues/drop.rows', 'outliers/impute', 'duplicates', {'standardiseValues': '```python\ndef transform_table(input_table):\n    # Extract headers and data\n    headers = input_table[0]\n    data = input_table[1:]\n    \n    # Create the output table with the same headers as provided in output_table\n    output_table = [\n        [\n            "student_total_score", "Stress_Level (1-10)", "student_gender", "student_id",\n            "student_age", "assignments_avg", "midterm_score", "final_score",\n            "full_name", "projects_score", "Family_Income_Level", "Sleep_Hours_per_Night",\n            "student_email", "Parent_Education_Level", "attendance_percent",\n            "weekly_study_hours", "quizzes_avg", "dept", "takes_extracurriculars",\n            "grade", "has_home_internet"\n        ]\n    ]\n    \n    # Process each row of data\n    for row in data:\n        new_row = []\n        \n        # Create a dictionary for easier column access\n        row_dict = {headers[i]: row[i] for i in range(len(headers))}\n        \n        # Process each column according to the schema\n        \n        # student_total_score\n        total_score = row_dict.get("student_total_score")\n        if total_score is not None and total_score != "_ext_":\n            new_row.append(float(total_score) * 0.75 if isinstance(total_score, (int, float, str)) else total_score)\n        else:\n            new_row.append(total_score)\n            \n        # Stress_Level (1-10)\n        stress_level = row_dict.get("Stress_Level (1-10)")\n        if stress_level is not None and stress_level != "_ext_":\n            new_row.append(int(float(stress_level)))\n        else:\n            new_row.append(stress_level)\n            \n        # student_gender\n        gender = row_dict.get("student_gender")\n        new_row.append(gender)\n        \n        # student_id\n        student_id = row_dict.get("student_id")\n        new_row.append(student_id)\n        \n        # student_age\n        new_row.append(row_dict.get("student_age"))\n        \n        # assignments_avg\n        new_row.append(row_dict.get("assignments_avg"))\n        \n        # midterm_score\n        new_row.append(row_dict.get("midterm_score"))\n        \n        # final_score\n        new_row.append(row_dict.get("final_score"))\n        \n        # full_name\n        full_name = row_dict.get("full_name")\n        if full_name is not None and full_name != "_ext_" and "|" in full_name:\n            first_name, last_name = full_name.split("|")\n            new_row.append(f"{first_name} {last_name}")\n        else:\n            new_row.append(full_name)\n        \n        # projects_score\n        new_row.append(row_dict.get("projects_score"))\n        \n        # Family_Income_Level\n        new_row.append(row_dict.get("Family_Income_Level"))\n        \n        # Sleep_Hours_per_Night\n        new_row.append(row_dict.get("Sleep_Hours_per_Night"))\n        \n        # student_email\n        new_row.append(row_dict.get("student_email"))\n        \n        # Parent_Education_Level\n        new_row.append(row_dict.get("Parent_Education_Level"))\n        \n        # attendance_percent\n        new_row.append(row_dict.get("attendance_percent"))\n        \n        # weekly_study_hours\n        new_row.append(row_dict.get("weekly_study_hours"))\n        \n        # quizzes_avg\n        new_row.append(row_dict.get("quizzes_avg"))\n        \n        # dept\n        new_row.append(row_dict.get("dept"))\n        \n        # takes_extracurriculars\n        takes_extra = row_dict.get("takes_extracurriculars")\n        if takes_extra is not None and takes_extra != "_ext_":\n            new_row.append(1 if takes_extra == "Yes" else 0)\n        else:\n            new_row.append(takes_extra)\n        \n        # grade\n        new_row.append(row_dict.get("grade"))\n        \n        # has_home_internet\n        has_internet = row_dict.get("has_home_internet")\n        if has_internet is not None and has_internet != "_ext_":\n            new_row.append(1 if has_internet == "Yes" else 0)\n        else:\n            new_row.append(has_internet)\n        \n        output_table.append(new_row)\n    \n    return output_table\n```'}]
root INFO - 07/04/2025 11:42:40 AM : Published the following metrics to Reporter : {'from': 'pre_etl_pipeline', 'contents': {'missing': {'missing_cells_percent': 1.754}, 'outliers': {'numerical_outliers_percent': 0.0}, 'duplicates': {'duplicate_rows_percent': 0.02}, 'dq': 0.994}}
kafka.conn INFO - 07/04/2025 11:42:40 AM : <BrokerConnection node_id=1001 host=localhost:9092 <connecting> [IPv6 ('::1', 9092, 0, 0)]>: connecting to localhost:9092 [('::1', 9092, 0, 0) IPv6]
kafka.conn INFO - 07/04/2025 11:42:40 AM : <BrokerConnection node_id=1001 host=localhost:9092 <connecting> [IPv6 ('::1', 9092, 0, 0)]>: Connection complete.
kafka.conn INFO - 07/04/2025 11:42:40 AM : <BrokerConnection node_id=bootstrap-0 host=localhost:9092 <connected> [IPv6 ('::1', 9092, 0, 0)]>: Closing connection. 
root INFO - 07/04/2025 11:42:40 AM : Applied plan to file 'input\source\students_grades_source.json'
root INFO - 07/04/2025 11:42:41 AM : Successfully loaded the transformed file to '\output'
root INFO - 07/04/2025 11:42:41 AM : Published the following metrics to Reporter : {'from': 'post_etl_pipeline', 'contents': {'missing': {'missing_cells_percent': 0.0}, 'outliers': {'numerical_outliers_percent': 0.0}, 'duplicates': {'duplicate_rows_percent': 0.02}, 'dq': 1.0}}
kafka.producer.kafka INFO - 07/04/2025 11:42:41 AM : Closing the Kafka producer with 4294967.0 secs timeout.
kafka.conn INFO - 07/04/2025 11:42:41 AM : <BrokerConnection node_id=1001 host=localhost:9092 <connected> [IPv6 ('::1', 9092, 0, 0)]>: Closing connection. 
kafka.conn INFO - 07/04/2025 11:42:41 AM : <BrokerConnection node_id=1001 host=localhost:9092 <connected> [IPv6 ('::1', 9092, 0, 0)]>: Closing connection. 

root INFO - 14/04/2025 11:11:35 AM : Connected to broker
kafka.consumer.subscription_state INFO - 14/04/2025 11:11:35 AM : Updated partition assignment: [TopicPartition(topic='optimalPlans', partition=0)]
kafka.conn INFO - 14/04/2025 11:11:35 AM : <BrokerConnection node_id=1001 host=localhost:9092 <connecting> [IPv6 ('::1', 9092, 0, 0)]>: connecting to localhost:9092 [('::1', 9092, 0, 0) IPv6]
kafka.conn INFO - 14/04/2025 11:11:35 AM : <BrokerConnection node_id=1001 host=localhost:9092 <connecting> [IPv6 ('::1', 9092, 0, 0)]>: Connection complete.
kafka.conn INFO - 14/04/2025 11:11:35 AM : <BrokerConnection node_id=bootstrap-0 host=localhost:9092 <connected> [IPv6 ('::1', 9092, 0, 0)]>: Closing connection. 
root INFO - 14/04/2025 11:12:56 AM : Received optimal plan -> ['ecommerce_transactions_source.csv', {'associated_key': None}, {'standardiseFeatures': '```python\n{\n    ("InvoiceNo",): ("invoice_number",),\n    ("StockCode",): ("stock_code",),\n    ("Description",): ("desc",),\n    ("Quantity",): ("qty",),\n    ("InvoiceDate",): ("invoice_date",),\n    ("UnitPrice",): ("unit_price",),\n    ("CustomerID",): ("customer_id",),\n    ("Country",): ("country",)\n}\n```'}, 'missingValues/drop.rows', 'duplicates', 'outliers/impute', {'standardiseValues': "```python\ndef transform_table(input_table):\n    header = input_table[0]\n    data = input_table[1:]\n    \n    output_table = [list(header)]\n    \n    for row in data:\n        # Skip rows with missing invoice number if it's a cancellation (starts with 'C')\n        if row[0] and row[0].startswith('C'):\n            continue\n            \n        new_row = []\n        for i, value in enumerate(row):\n            if value == '_ext_':\n                new_row.append(value)\n                continue\n                \n            col_name = header[i]\n            \n            # Process values based on column type\n            if col_name == 'invoice_number' and value:\n                # Keep invoice_number as is, but remove C prefix if present\n                if value.startswith('C'):\n                    new_row.append(value[1:])\n                else:\n                    new_row.append(value)\n            elif col_name == 'stock_code':\n                new_row.append(value)\n            elif col_name == 'desc':\n                # Convert description to lowercase\n                new_row.append(value.lower() if value else value)\n            elif col_name == 'qty':\n                # Convert qty to string if it's a number\n                if value:\n                    try:\n                        new_row.append(str(int(float(value))))\n                    except (ValueError, TypeError):\n                        new_row.append(value)\n                else:\n                    new_row.append(value)\n            elif col_name == 'invoice_date':\n                # Format date if present\n                if value:\n                    try:\n                        # Simple transformation: replace some chars for the example\n                        date_parts = value.split(' ')\n                        if len(date_parts) == 2:\n                            date = date_parts[0].replace('-', '-')\n                            time = date_parts[1].replace(':', '-')\n                            new_value = date.replace('-', '-') + ' ' + time.replace(':', '-')\n                            new_row.append(new_value)\n                        else:\n                            new_row.append(value)\n                    except Exception:\n                        new_row.append(value)\n                else:\n                    new_row.append(value)\n            elif col_name == 'unit_price':\n                new_row.append(value)\n            elif col_name == 'customer_id':\n                new_row.append(value)\n            elif col_name == 'country':\n                # Convert country to lowercase\n                new_row.append(value.lower() if value else value)\n            else:\n                new_row.append(value)\n                \n        # Only add rows that have at least some data\n        if any(val for val in new_row):\n            output_table.append(new_row)\n            \n    return output_table\n```"}]
root INFO - 14/04/2025 11:13:02 AM : Published the following metrics to Reporter : {'from': 'pre_etl_pipeline', 'contents': {'missing': {'missing_cells_percent': 41.905}, 'outliers': {'numerical_outliers_percent': 2.994}, 'duplicates': {'duplicate_rows_percent': 18.632}, 'dq': 0.788}}
kafka.conn INFO - 14/04/2025 11:13:02 AM : <BrokerConnection node_id=1001 host=localhost:9092 <connecting> [IPv6 ('::1', 9092, 0, 0)]>: connecting to localhost:9092 [('::1', 9092, 0, 0) IPv6]
kafka.conn INFO - 14/04/2025 11:13:02 AM : <BrokerConnection node_id=1001 host=localhost:9092 <connecting> [IPv6 ('::1', 9092, 0, 0)]>: Connection complete.
kafka.conn INFO - 14/04/2025 11:13:02 AM : <BrokerConnection node_id=bootstrap-0 host=localhost:9092 <connected> [IPv6 ('::1', 9092, 0, 0)]>: Closing connection. 
root INFO - 14/04/2025 11:13:11 AM : Applied plan to file 'input\source\ecommerce_transactions_source.csv'
root INFO - 14/04/2025 11:13:12 AM : Successfully loaded the transformed file to '\output'
root INFO - 14/04/2025 11:13:14 AM : Published the following metrics to Reporter : {'from': 'post_etl_pipeline', 'contents': {'missing': {'missing_cells_percent': 0.0}, 'outliers': {'numerical_outliers_percent': 0.0}, 'duplicates': {'duplicate_rows_percent': 5.597}, 'dq': 0.987}}
kafka.producer.kafka INFO - 14/04/2025 11:13:14 AM : Closing the Kafka producer with 4294967.0 secs timeout.
kafka.conn INFO - 14/04/2025 11:13:14 AM : <BrokerConnection node_id=1001 host=localhost:9092 <connected> [IPv6 ('::1', 9092, 0, 0)]>: Closing connection. 
kafka.conn INFO - 14/04/2025 11:13:14 AM : <BrokerConnection node_id=1001 host=localhost:9092 <connected> [IPv6 ('::1', 9092, 0, 0)]>: Closing connection. 

[2025-05-31T13:44:58.102+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2025-05-31T13:44:58.116+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: PlanningEngine.publishOptimalPlan manual__2025-05-31T13:42:52.456293+00:00 [queued]>
[2025-05-31T13:44:58.125+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: PlanningEngine.publishOptimalPlan manual__2025-05-31T13:42:52.456293+00:00 [queued]>
[2025-05-31T13:44:58.126+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 2
[2025-05-31T13:44:58.139+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): publishOptimalPlan> on 2025-05-31 13:42:52.456293+00:00
[2025-05-31T13:44:58.144+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=129) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2025-05-31T13:44:58.146+0000] {standard_task_runner.py:72} INFO - Started process 130 to run task
[2025-05-31T13:44:58.146+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'PlanningEngine', 'publishOptimalPlan', 'manual__2025-05-31T13:42:52.456293+00:00', '--job-id', '3427', '--raw', '--subdir', 'DAGS_FOLDER/***DAG.py', '--cfg-path', '/tmp/tmpylijhgu8']
[2025-05-31T13:44:58.147+0000] {standard_task_runner.py:105} INFO - Job 3427: Subtask publishOptimalPlan
[2025-05-31T13:44:58.185+0000] {task_command.py:467} INFO - Running <TaskInstance: PlanningEngine.publishOptimalPlan manual__2025-05-31T13:42:52.456293+00:00 [running]> on host 87ce0d954e61
[2025-05-31T13:44:58.248+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='PlanningEngine' AIRFLOW_CTX_TASK_ID='publishOptimalPlan' AIRFLOW_CTX_EXECUTION_DATE='2025-05-31T13:42:52.456293+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-05-31T13:42:52.456293+00:00'
[2025-05-31T13:44:58.249+0000] {taskinstance.py:731} INFO - ::endgroup::
[2025-05-31T13:44:58.273+0000] {conn.py:362} INFO - <BrokerConnection node_id=bootstrap-0 host=kafka:9091 <connecting> [IPv4 ('172.18.0.5', 9091)]>: connecting to kafka:9091 [('172.18.0.5', 9091) IPv4]
[2025-05-31T13:44:58.274+0000] {conn.py:957} INFO - Probing node bootstrap-0 broker version
[2025-05-31T13:44:58.275+0000] {conn.py:393} INFO - <BrokerConnection node_id=bootstrap-0 host=kafka:9091 <connecting> [IPv4 ('172.18.0.5', 9091)]>: Connection complete.
[2025-05-31T13:44:58.380+0000] {conn.py:1019} INFO - Broker version identified as 2.6.0
[2025-05-31T13:44:58.380+0000] {conn.py:1020} INFO - Set configuration api_version=(2, 6, 0) to skip auto check_version requests on startup
[2025-05-31T13:44:58.383+0000] {airflowDAG.py:411} INFO - Connected to broker
[2025-05-31T13:44:58.385+0000] {airflowDAG.py:415} INFO - Optimal plan {'schema': {'CHEMISTRY_ID': 'string', 'CHEMISTRY_TYPE': 'string', 'ASSAY_CATEGORY': 'boolean', 'ASSAY_NAME': 'string', 'ACTIVITY': 'ambiguous', 'UNITS': 'boolean', 'ASSAY_QUAL_RESULT': 'boolean', 'CONCENTRATION': 'number', 'CONCENTRATION_UNITS': 'string', 'ASSAY_DATE': 'string', 'DEPARTMENT_ID': 'boolean', 'BIOMASS_ID': 'string', 'ORGANISM_ID': 'string', 'SITE_ID': 'string', 'REGION': 'boolean', 'LATITUDE': 'number', 'LONGITUDE': 'ambiguous', 'PRODUCTION_MEDIA': 'string', 'SOURCE_ID': 'string', 'SOURCE_TYPE': 'string', 'PERSON_ID': 'string', 'COUNTRY': 'string', 'PHYLUM': 'string', 'COMMON_NAME': 'boolean', 'FAMILY': 'string', 'GENUS': 'string', 'SPECIES': 'string'}, 'plan': ['chemistry_source.csv', {'associated_key': None}, {'standardiseFeatures': '```python\n{\n    ("CHEMISTRY_ID",): ("CHEMISTRY_ID",),\n    ("CHEMISTRY_TYPE",): ("CHEMISTRY_TYPE",),\n    ("ASSAY_CATEGORY",): ("ASSAY_CATEGORY",),\n    ("ASSAY_NAME",): ("ASSAY_NAME",),\n    ("ACTIVITY",): ("ACTIVITY",),\n    ("UNITS",): ("UNITS",),\n    ("ASSAY_QUAL_RESULT",): ("ASSAY_QUAL_RESULT",),\n    ("CONCENTRATION",): ("CONCENTRATION",),\n    ("CONCENTRATION_UNITS",): ("CONCENTRATION_UNITS",),\n    ("ASSAY_DATE",): ("ASSAY_DATE",),\n    ("DEPARTMENT_ID",): ("DEPARTMENT_ID",),\n    ("BIOMASS_ID",): ("BIOMASS_ID",),\n    ("ORGANISM_ID",): ("ORGANISM_ID",),\n    ("SITE_ID",): ("SITE_ID",),\n    ("REGION",): ("REGION",),\n    ("LATITUDE",): ("LATITUDE",),\n    ("LONGITUDE",): ("LONGITUDE",),\n    ("PRODUCTION_MEDIA",): ("PRODUCTION_MEDIA",),\n    ("SOURCE_ID",): ("SOURCE_ID",),\n    ("SOURCE_TYPE",): ("SOURCE_TYPE",),\n    ("PERSON_ID",): ("PERSON_ID",),\n    ("COUNTRY",): ("COUNTRY",),\n    ("PHYLUM",): ("PHYLUM",),\n    ("COMMON_NAME",): ("COMMON_NAME",),\n    ("FAMILY",): ("FAMILY",),\n    ("GENUS",): ("GENUS",),\n    ("SPECIES",): ("SPECIES",)\n}\n```'}, 'missingValues/impute', 'duplicates', 'outliers/impute', {'standardiseValues': "```python\ndef transform_table(input_table):\n    header = input_table[0]\n    data_rows = input_table[1:]\n    output_table = [header]\n    \n    for row in data_rows:\n        transformed_row = row.copy()\n        \n        # Convert empty CHEMISTRY_TYPE to 'E' if it's empty\n        if transformed_row[header.index('CHEMISTRY_TYPE')] == '':\n            transformed_row[header.index('CHEMISTRY_TYPE')] = 'E'\n            \n        # Convert ACTIVITY to float when possible\n        activity_idx = header.index('ACTIVITY')\n        activity_val = transformed_row[activity_idx]\n        if activity_val != '_ext_':\n            try:\n                transformed_row[activity_idx] = float(activity_val)\n            except ValueError:\n                # Handle special cases like 'Jan-71'\n                pass\n            \n        # Convert LATITUDE and LONGITUDE to numeric values when possible\n        lat_idx = header.index('LATITUDE')\n        if transformed_row[lat_idx] != '_ext_' and transformed_row[lat_idx] != '':\n            try:\n                transformed_row[lat_idx] = float(transformed_row[lat_idx])\n            except ValueError:\n                pass\n                \n        lon_idx = header.index('LONGITUDE')\n        if transformed_row[lon_idx] != '_ext_' and transformed_row[lon_idx] != '':\n            try:\n                transformed_row[lon_idx] = float(transformed_row[lon_idx])\n            except ValueError:\n                # Handle special cases like 'Dec-72'\n                pass\n            \n        output_table.append(transformed_row)\n        \n    return output_table\n```"}]} published to broker
[2025-05-31T13:44:58.387+0000] {conn.py:362} INFO - <BrokerConnection node_id=1001 host=kafka:9091 <connecting> [IPv4 ('172.18.0.5', 9091)]>: connecting to kafka:9091 [('172.18.0.5', 9091) IPv4]
[2025-05-31T13:44:58.388+0000] {kafka.py:486} INFO - Closing the Kafka producer with 9223372036.0 secs timeout.
[2025-05-31T13:44:58.389+0000] {conn.py:393} INFO - <BrokerConnection node_id=1001 host=kafka:9091 <connecting> [IPv4 ('172.18.0.5', 9091)]>: Connection complete.
[2025-05-31T13:44:58.390+0000] {conn.py:673} INFO - <BrokerConnection node_id=bootstrap-0 host=kafka:9091 <connected> [IPv4 ('172.18.0.5', 9091)]>: Closing connection. 
[2025-05-31T13:44:58.395+0000] {conn.py:673} INFO - <BrokerConnection node_id=1001 host=kafka:9091 <connected> [IPv4 ('172.18.0.5', 9091)]>: Closing connection. 
[2025-05-31T13:44:58.397+0000] {python.py:240} INFO - Done. Returned value was: None
[2025-05-31T13:44:58.408+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2025-05-31T13:44:58.409+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=PlanningEngine, task_id=publishOptimalPlan, run_id=manual__2025-05-31T13:42:52.456293+00:00, execution_date=20250531T134252, start_date=20250531T134458, end_date=20250531T134458
[2025-05-31T13:44:58.441+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2025-05-31T13:44:58.461+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-05-31T13:44:58.465+0000] {local_task_job_runner.py:245} INFO - ::endgroup::

[2025-05-02T10:20:58.366+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2025-05-02T10:20:58.381+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: PlanningEngine.publishOptimalPlan manual__2025-05-02T10:18:21.303082+00:00 [queued]>
[2025-05-02T10:20:58.389+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: PlanningEngine.publishOptimalPlan manual__2025-05-02T10:18:21.303082+00:00 [queued]>
[2025-05-02T10:20:58.390+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 2
[2025-05-02T10:21:26.194+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): publishOptimalPlan> on 2025-05-02 10:18:21.303082+00:00
[2025-05-02T10:20:57.996+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=265) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2025-05-02T10:20:57.998+0000] {standard_task_runner.py:72} INFO - Started process 266 to run task
[2025-05-02T10:20:57.999+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'PlanningEngine', 'publishOptimalPlan', 'manual__2025-05-02T10:18:21.303082+00:00', '--job-id', '3415', '--raw', '--subdir', 'DAGS_FOLDER/***DAG.py', '--cfg-path', '/tmp/tmpr83y_k29']
[2025-05-02T10:20:58.000+0000] {standard_task_runner.py:105} INFO - Job 3415: Subtask publishOptimalPlan
[2025-05-02T10:20:58.047+0000] {task_command.py:467} INFO - Running <TaskInstance: PlanningEngine.publishOptimalPlan manual__2025-05-02T10:18:21.303082+00:00 [running]> on host 8847949431eb
[2025-05-02T10:20:58.120+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='PlanningEngine' AIRFLOW_CTX_TASK_ID='publishOptimalPlan' AIRFLOW_CTX_EXECUTION_DATE='2025-05-02T10:18:21.303082+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-05-02T10:18:21.303082+00:00'
[2025-05-02T10:20:58.121+0000] {taskinstance.py:731} INFO - ::endgroup::
[2025-05-02T10:20:58.144+0000] {conn.py:362} INFO - <BrokerConnection node_id=bootstrap-0 host=kafka:9091 <connecting> [IPv4 ('172.18.0.5', 9091)]>: connecting to kafka:9091 [('172.18.0.5', 9091) IPv4]
[2025-05-02T10:20:58.145+0000] {conn.py:957} INFO - Probing node bootstrap-0 broker version
[2025-05-02T10:20:58.147+0000] {conn.py:393} INFO - <BrokerConnection node_id=bootstrap-0 host=kafka:9091 <connecting> [IPv4 ('172.18.0.5', 9091)]>: Connection complete.
[2025-05-02T10:20:58.257+0000] {conn.py:1019} INFO - Broker version identified as 2.6.0
[2025-05-02T10:20:58.258+0000] {conn.py:1020} INFO - Set configuration api_version=(2, 6, 0) to skip auto check_version requests on startup
[2025-05-02T10:20:58.260+0000] {airflowDAG.py:411} INFO - Connected to broker
[2025-05-02T10:20:58.262+0000] {airflowDAG.py:415} INFO - Optimal plan {'schema': {'id': 'number', 'first_name': 'string', 'age': 'number', 'country_name': 'string', 'subscription': 'string', 'watch_time_hours': 'number', 'favourite_genre': 'string', 'last_access': 'string'}, 'plan': ['netflix_users_source.csv', {'associated_key': None}, {'standardiseFeatures': '```python\n{\n    ("User_ID",): ("id",),\n    ("Name",): ("first_name", "last_name"),\n    ("Age",): ("age",),\n    ("Country",): ("country_name",),\n    ("Subscription_Type",): ("subscription",),\n    ("Watch_Time_Hours",): ("watch_time_hours",),\n    ("Favorite_Genre",): ("favourite_genre",),\n    ("Last_Login",): ("last_access",)\n}\n```'}, 'missingValues/impute', 'duplicates', 'outliers/impute', {'standardiseValues': "```python\ndef transform_table(input_table):\n    header = input_table[0]\n    data = input_table[1:]\n    \n    # Create output table with the same header\n    output_table = [header.copy()]\n    \n    # Find index for the 'first_name' column where we need to extract last name\n    first_name_idx = header.index('first_name')\n    \n    # Create a new column 'last_name' after 'first_name'\n    header.insert(first_name_idx + 1, 'last_name')\n    \n    # Process each row\n    for row in data:\n        new_row = row.copy()\n        \n        # Split the name into first and last name\n        if row[first_name_idx]:\n            name_parts = row[first_name_idx].split()\n            if len(name_parts) > 1:\n                new_row[first_name_idx] = name_parts[0]\n                new_row.insert(first_name_idx + 1, name_parts[-1])\n            else:\n                new_row.insert(first_name_idx + 1, '')\n        else:\n            new_row.insert(first_name_idx + 1, '')\n        \n        # Convert watch_time_hours to integer if it exists\n        watch_time_idx = header.index('watch_time_hours')\n        if new_row[watch_time_idx] and new_row[watch_time_idx] != '_ext_':\n            try:\n                new_row[watch_time_idx] = str(int(float(new_row[watch_time_idx])))\n            except (ValueError, TypeError):\n                pass\n        \n        # Add the processed row to the output table\n        output_table.append(new_row)\n    \n    return output_table\n```"}]} published to broker
[2025-05-02T10:20:58.262+0000] {kafka.py:486} INFO - Closing the Kafka producer with 9223372036.0 secs timeout.
[2025-05-02T10:20:58.263+0000] {conn.py:362} INFO - <BrokerConnection node_id=1001 host=kafka:9091 <connecting> [IPv4 ('172.18.0.5', 9091)]>: connecting to kafka:9091 [('172.18.0.5', 9091) IPv4]
[2025-05-02T10:20:58.265+0000] {conn.py:393} INFO - <BrokerConnection node_id=1001 host=kafka:9091 <connecting> [IPv4 ('172.18.0.5', 9091)]>: Connection complete.
[2025-05-02T10:20:58.265+0000] {conn.py:673} INFO - <BrokerConnection node_id=bootstrap-0 host=kafka:9091 <connected> [IPv4 ('172.18.0.5', 9091)]>: Closing connection. 
[2025-05-02T10:20:58.270+0000] {conn.py:673} INFO - <BrokerConnection node_id=1001 host=kafka:9091 <connected> [IPv4 ('172.18.0.5', 9091)]>: Closing connection. 
[2025-05-02T10:20:58.271+0000] {python.py:240} INFO - Done. Returned value was: None
[2025-05-02T10:20:58.280+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2025-05-02T10:20:58.281+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=PlanningEngine, task_id=publishOptimalPlan, run_id=manual__2025-05-02T10:18:21.303082+00:00, execution_date=20250502T101821, start_date=20250502T102058, end_date=20250502T102058
[2025-05-02T10:20:58.313+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2025-05-02T10:20:58.335+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-05-02T10:20:58.339+0000] {local_task_job_runner.py:245} INFO - ::endgroup::

[2025-05-31T13:57:57.988+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2025-05-31T13:57:58.003+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: PlanningEngine.publishOptimalPlan manual__2025-05-31T13:57:15.568897+00:00 [queued]>
[2025-05-31T13:57:58.011+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: PlanningEngine.publishOptimalPlan manual__2025-05-31T13:57:15.568897+00:00 [queued]>
[2025-05-31T13:57:58.012+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 2
[2025-05-31T13:57:58.025+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): publishOptimalPlan> on 2025-05-31 13:57:15.568897+00:00
[2025-05-31T13:57:58.031+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=116) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2025-05-31T13:57:58.033+0000] {standard_task_runner.py:72} INFO - Started process 117 to run task
[2025-05-31T13:57:58.033+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'PlanningEngine', 'publishOptimalPlan', 'manual__2025-05-31T13:57:15.568897+00:00', '--job-id', '3439', '--raw', '--subdir', 'DAGS_FOLDER/***DAG.py', '--cfg-path', '/tmp/tmp_dhlppj0']
[2025-05-31T13:57:58.035+0000] {standard_task_runner.py:105} INFO - Job 3439: Subtask publishOptimalPlan
[2025-05-31T13:57:58.078+0000] {task_command.py:467} INFO - Running <TaskInstance: PlanningEngine.publishOptimalPlan manual__2025-05-31T13:57:15.568897+00:00 [running]> on host 6ff7a72dd575
[2025-05-31T13:57:58.147+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='PlanningEngine' AIRFLOW_CTX_TASK_ID='publishOptimalPlan' AIRFLOW_CTX_EXECUTION_DATE='2025-05-31T13:57:15.568897+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-05-31T13:57:15.568897+00:00'
[2025-05-31T13:57:58.148+0000] {taskinstance.py:731} INFO - ::endgroup::
[2025-05-31T13:57:58.170+0000] {conn.py:362} INFO - <BrokerConnection node_id=bootstrap-0 host=kafka:9091 <connecting> [IPv4 ('172.18.0.5', 9091)]>: connecting to kafka:9091 [('172.18.0.5', 9091) IPv4]
[2025-05-31T13:57:58.171+0000] {conn.py:957} INFO - Probing node bootstrap-0 broker version
[2025-05-31T13:57:58.173+0000] {conn.py:393} INFO - <BrokerConnection node_id=bootstrap-0 host=kafka:9091 <connecting> [IPv4 ('172.18.0.5', 9091)]>: Connection complete.
[2025-05-31T13:57:58.277+0000] {conn.py:1019} INFO - Broker version identified as 2.6.0
[2025-05-31T13:57:58.278+0000] {conn.py:1020} INFO - Set configuration api_version=(2, 6, 0) to skip auto check_version requests on startup
[2025-05-31T13:57:58.280+0000] {airflowDAG.py:411} INFO - Connected to broker
[2025-05-31T13:57:58.282+0000] {airflowDAG.py:415} INFO - Optimal plan {'schema': {'CHEMISTRY_ID': 'string', 'CHEMISTRY_TYPE': 'string', 'ASSAY_CATEGORY': 'string', 'ASSAY_NAME': 'string', 'ACTIVITY': 'ambiguous', 'UNITS': 'boolean', 'ASSAY_QUAL_RESULT': 'boolean', 'CONCENTRATION': 'number', 'CONCENTRATION_UNITS': 'string', 'ASSAY_DATE': 'string', 'DEPARTMENT_ID': 'boolean', 'BIOMASS_ID': 'string', 'ORGANISM_ID': 'string', 'SITE_ID': 'string', 'REGION': 'string', 'LATITUDE': 'number', 'LONGITUDE': 'ambiguous', 'PRODUCTION_MEDIA': 'string', 'SOURCE_ID': 'string', 'SOURCE_TYPE': 'string', 'PERSON_ID': 'string', 'COUNTRY': 'string', 'PHYLUM': 'string', 'COMMON_NAME': 'boolean', 'FAMILY': 'string', 'GENUS': 'string', 'SPECIES': 'string'}, 'plan': ['chemistry_source.csv', {'associated_key': None}, {'standardiseFeatures': '```python\n{\n    ("CHEMISTRY_ID",): ("CHEMISTRY_ID",),\n    ("CHEMISTRY_TYPE",): ("CHEMISTRY_TYPE",),\n    ("ASSAY_CATEGORY",): ("ASSAY_CATEGORY",),\n    ("ASSAY_NAME",): ("ASSAY_NAME",),\n    ("ACTIVITY",): ("ACTIVITY",),\n    ("UNITS",): ("UNITS",),\n    ("ASSAY_QUAL_RESULT",): ("ASSAY_QUAL_RESULT",),\n    ("CONCENTRATION",): ("CONCENTRATION",),\n    ("CONCENTRATION_UNITS",): ("CONCENTRATION_UNITS",),\n    ("ASSAY_DATE",): ("ASSAY_DATE",),\n    ("DEPARTMENT_ID",): ("DEPARTMENT_ID",),\n    ("BIOMASS_ID",): ("BIOMASS_ID",),\n    ("ORGANISM_ID",): ("ORGANISM_ID",),\n    ("SITE_ID",): ("SITE_ID",),\n    ("REGION",): ("REGION",),\n    ("LATITUDE",): ("LATITUDE",),\n    ("LONGITUDE",): ("LONGITUDE",),\n    ("PRODUCTION_MEDIA",): ("PRODUCTION_MEDIA",),\n    ("SOURCE_ID",): ("SOURCE_ID",),\n    ("SOURCE_TYPE",): ("SOURCE_TYPE",),\n    ("PERSON_ID",): ("PERSON_ID",),\n    ("COUNTRY",): ("COUNTRY",),\n    ("PHYLUM",): ("PHYLUM",),\n    ("COMMON_NAME",): ("COMMON_NAME",),\n    ("FAMILY",): ("FAMILY",),\n    ("GENUS",): ("GENUS",),\n    ("SPECIES",): ("SPECIES",)\n}\n```'}, 'missingValues/impute', 'duplicates', 'outliers/impute', {'standardiseValues': "```python\ndef transform_table(input_table):\n    # Create a copy of input table structure with first row (headers)\n    output_table = [input_table[0][:]]\n    \n    # Process each data row\n    for row in input_table[1:]:\n        # Create a new row with the same structure\n        new_row = row[:]\n        \n        # Handle the ACTIVITY field - convert to float if possible\n        activity = row[4]\n        if activity and activity != '_ext_':\n            # Check if the activity value contains a month abbreviation (like Mar-65)\n            if '-' in activity and len(activity.split('-')) == 2:\n                parts = activity.split('-')\n                if parts[0] in ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']:\n                    # Convert month-value format to just the numeric part\n                    activity = parts[1]\n            \n            try:\n                new_row[4] = float(activity)\n            except ValueError:\n                # Keep as is if conversion fails\n                pass\n        \n        # Handle LONGITUDE - ensure it's converted to a number if possible\n        longitude = row[16]\n        if longitude and longitude != '_ext_':\n            if longitude.startswith('Dec-'):\n                # Handle Dec-82 format\n                try:\n                    new_row[16] = float(longitude.split('-')[1])\n                except (ValueError, IndexError):\n                    pass\n            else:\n                try:\n                    new_row[16] = float(longitude)\n                except ValueError:\n                    pass\n        \n        # Ensure CONCENTRATION is a number\n        if row[7] and row[7] != '_ext_':\n            try:\n                new_row[7] = float(row[7])\n            except ValueError:\n                pass\n                \n        # Ensure LATITUDE is a number\n        if row[15] and row[15] != '_ext_':\n            try:\n                new_row[15] = float(row[15])\n            except ValueError:\n                pass\n                \n        # Clean up family name if it ends with spaces\n        if row[24] and row[24] != '_ext_':\n            new_row[24] = row[24].strip()\n        \n        output_table.append(new_row)\n        \n    return output_table\n```"}]} published to broker
[2025-05-31T13:57:58.283+0000] {kafka.py:486} INFO - Closing the Kafka producer with 9223372036.0 secs timeout.
[2025-05-31T13:57:58.284+0000] {conn.py:362} INFO - <BrokerConnection node_id=1001 host=kafka:9091 <connecting> [IPv4 ('172.18.0.5', 9091)]>: connecting to kafka:9091 [('172.18.0.5', 9091) IPv4]
[2025-05-31T13:57:58.285+0000] {conn.py:393} INFO - <BrokerConnection node_id=1001 host=kafka:9091 <connecting> [IPv4 ('172.18.0.5', 9091)]>: Connection complete.
[2025-05-31T13:57:58.286+0000] {conn.py:673} INFO - <BrokerConnection node_id=bootstrap-0 host=kafka:9091 <connected> [IPv4 ('172.18.0.5', 9091)]>: Closing connection. 
[2025-05-31T13:57:58.290+0000] {conn.py:673} INFO - <BrokerConnection node_id=1001 host=kafka:9091 <connected> [IPv4 ('172.18.0.5', 9091)]>: Closing connection. 
[2025-05-31T13:57:58.291+0000] {python.py:240} INFO - Done. Returned value was: None
[2025-05-31T13:57:58.300+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2025-05-31T13:57:58.301+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=PlanningEngine, task_id=publishOptimalPlan, run_id=manual__2025-05-31T13:57:15.568897+00:00, execution_date=20250531T135715, start_date=20250531T135758, end_date=20250531T135758
[2025-05-31T13:57:58.330+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2025-05-31T13:57:58.347+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-05-31T13:57:58.352+0000] {local_task_job_runner.py:245} INFO - ::endgroup::

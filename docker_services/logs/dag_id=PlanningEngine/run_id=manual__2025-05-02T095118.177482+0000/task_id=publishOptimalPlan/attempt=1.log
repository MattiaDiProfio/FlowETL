[2025-05-02T09:52:21.227+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2025-05-02T09:52:21.245+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: PlanningEngine.publishOptimalPlan manual__2025-05-02T09:51:18.177482+00:00 [queued]>
[2025-05-02T09:52:21.259+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: PlanningEngine.publishOptimalPlan manual__2025-05-02T09:51:18.177482+00:00 [queued]>
[2025-05-02T09:52:21.260+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 2
[2025-05-02T09:52:21.279+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): publishOptimalPlan> on 2025-05-02 09:51:18.177482+00:00
[2025-05-02T09:52:21.286+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=226) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2025-05-02T09:52:21.288+0000] {standard_task_runner.py:72} INFO - Started process 227 to run task
[2025-05-02T09:52:21.288+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'PlanningEngine', 'publishOptimalPlan', 'manual__2025-05-02T09:51:18.177482+00:00', '--job-id', '3403', '--raw', '--subdir', 'DAGS_FOLDER/***DAG.py', '--cfg-path', '/tmp/tmp1sql4rd1']
[2025-05-02T09:52:21.290+0000] {standard_task_runner.py:105} INFO - Job 3403: Subtask publishOptimalPlan
[2025-05-02T09:52:21.342+0000] {task_command.py:467} INFO - Running <TaskInstance: PlanningEngine.publishOptimalPlan manual__2025-05-02T09:51:18.177482+00:00 [running]> on host f31e97f3da01
[2025-05-02T09:52:21.416+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='PlanningEngine' AIRFLOW_CTX_TASK_ID='publishOptimalPlan' AIRFLOW_CTX_EXECUTION_DATE='2025-05-02T09:51:18.177482+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-05-02T09:51:18.177482+00:00'
[2025-05-02T09:52:21.417+0000] {taskinstance.py:731} INFO - ::endgroup::
[2025-05-02T09:52:21.438+0000] {conn.py:362} INFO - <BrokerConnection node_id=bootstrap-0 host=kafka:9091 <connecting> [IPv4 ('172.18.0.5', 9091)]>: connecting to kafka:9091 [('172.18.0.5', 9091) IPv4]
[2025-05-02T09:52:21.439+0000] {conn.py:957} INFO - Probing node bootstrap-0 broker version
[2025-05-02T09:52:21.440+0000] {conn.py:393} INFO - <BrokerConnection node_id=bootstrap-0 host=kafka:9091 <connecting> [IPv4 ('172.18.0.5', 9091)]>: Connection complete.
[2025-05-02T09:52:21.544+0000] {conn.py:1019} INFO - Broker version identified as 2.6.0
[2025-05-02T09:52:21.544+0000] {conn.py:1020} INFO - Set configuration api_version=(2, 6, 0) to skip auto check_version requests on startup
[2025-05-02T09:52:21.547+0000] {airflowDAG.py:411} INFO - Connected to broker
[2025-05-02T09:52:21.549+0000] {airflowDAG.py:415} INFO - Optimal plan {'schema': {'user_engagement': 'number', 'tone': 'string', 'post_language': 'string', 'post_content': 'string', 'post_character_count': 'boolean', 'post_tags': 'complex'}, 'plan': ['social_media_posts_source.json', {'associated_key': None}, {'standardiseFeatures': '```python\n{\n    ("engagement",): ("user_engagement",),\n    ("tone",): ("tone",),\n    ("language",): ("post_language",),\n    ("text",): ("post_content",),\n    ("line_count",): ("post_character_count",),\n    ("tags",): ("post_tags",)\n}\n```'}, 'missingValues/impute', 'duplicates', 'outliers/impute', {'standardiseValues': "def transform_table(input_table):\n    header = input_table[0]\n    data = input_table[1:]\n    \n    # Create a new table with the same header initially\n    transformed_table = [header.copy()]\n    \n    for row in data:\n        new_row = []\n        for i, value in enumerate(row):\n            col_name = header[i]\n            \n            # Process each column based on its type and transformation rules\n            if col_name == 'user_engagement':\n                # Assuming we need to provide a random scaled value\n                if isinstance(value, (int, float)):\n                    new_row.append(value // 4 if value > 100 else value)\n                else:\n                    new_row.append(value)\n            \n            elif col_name == 'tone':\n                # Convert tone to lowercase\n                if isinstance(value, str) and value != '_ext_':\n                    new_row.append(value.lower())\n                else:\n                    new_row.append(value)\n            \n            elif col_name == 'post_content':\n                # Pass through post_content unchanged\n                new_row.append(value)\n            \n            elif col_name == 'post_character_count':\n                # Convert to count of characters in post_content\n                post_content = row[header.index('post_content')]\n                if post_content != '_ext_' and value != '_ext_':\n                    char_count = len(post_content.split('\\n'))\n                    new_row.append(char_count)\n                else:\n                    new_row.append(value)\n            \n            elif col_name == 'post_language':\n                # Pass through language unchanged\n                new_row.append(value)\n            \n            elif col_name == 'post_tags':\n                # Convert tags list to comma-separated string\n                if isinstance(value, list) and value != '_ext_':\n                    new_row.append(', '.join(value))\n                else:\n                    new_row.append(value)\n        \n        transformed_table.append(new_row)\n    \n    return transformed_table"}]} published to broker
[2025-05-02T09:52:21.550+0000] {kafka.py:486} INFO - Closing the Kafka producer with 9223372036.0 secs timeout.
[2025-05-02T09:52:21.550+0000] {conn.py:362} INFO - <BrokerConnection node_id=1001 host=kafka:9091 <connecting> [IPv4 ('172.18.0.5', 9091)]>: connecting to kafka:9091 [('172.18.0.5', 9091) IPv4]
[2025-05-02T09:52:21.551+0000] {conn.py:393} INFO - <BrokerConnection node_id=1001 host=kafka:9091 <connecting> [IPv4 ('172.18.0.5', 9091)]>: Connection complete.
[2025-05-02T09:52:21.552+0000] {conn.py:673} INFO - <BrokerConnection node_id=bootstrap-0 host=kafka:9091 <connected> [IPv4 ('172.18.0.5', 9091)]>: Closing connection. 
[2025-05-02T09:52:21.555+0000] {conn.py:673} INFO - <BrokerConnection node_id=1001 host=kafka:9091 <connected> [IPv4 ('172.18.0.5', 9091)]>: Closing connection. 
[2025-05-02T09:52:21.557+0000] {python.py:240} INFO - Done. Returned value was: None
[2025-05-02T09:52:21.565+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2025-05-02T09:52:21.566+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=PlanningEngine, task_id=publishOptimalPlan, run_id=manual__2025-05-02T09:51:18.177482+00:00, execution_date=20250502T095118, start_date=20250502T095221, end_date=20250502T095221
[2025-05-02T09:52:21.585+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2025-05-02T09:52:21.604+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-05-02T09:52:21.608+0000] {local_task_job_runner.py:245} INFO - ::endgroup::

[2025-05-01T15:18:44.789+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2025-05-01T15:18:44.804+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: PlanningEngine.publishOptimalPlan manual__2025-05-01T15:11:04.438406+00:00 [queued]>
[2025-05-01T15:18:44.812+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: PlanningEngine.publishOptimalPlan manual__2025-05-01T15:11:04.438406+00:00 [queued]>
[2025-05-01T15:18:44.814+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 2
[2025-05-01T15:18:44.829+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): publishOptimalPlan> on 2025-05-01 15:11:04.438406+00:00
[2025-05-01T15:18:44.835+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=210) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2025-05-01T15:18:44.837+0000] {standard_task_runner.py:72} INFO - Started process 211 to run task
[2025-05-01T15:18:44.837+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'PlanningEngine', 'publishOptimalPlan', 'manual__2025-05-01T15:11:04.438406+00:00', '--job-id', '3371', '--raw', '--subdir', 'DAGS_FOLDER/***DAG.py', '--cfg-path', '/tmp/tmpwdngrx79']
[2025-05-01T15:18:44.838+0000] {standard_task_runner.py:105} INFO - Job 3371: Subtask publishOptimalPlan
[2025-05-01T15:18:44.880+0000] {task_command.py:467} INFO - Running <TaskInstance: PlanningEngine.publishOptimalPlan manual__2025-05-01T15:11:04.438406+00:00 [running]> on host 29f5f6aefab8
[2025-05-01T15:18:44.945+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='PlanningEngine' AIRFLOW_CTX_TASK_ID='publishOptimalPlan' AIRFLOW_CTX_EXECUTION_DATE='2025-05-01T15:11:04.438406+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-05-01T15:11:04.438406+00:00'
[2025-05-01T15:18:44.946+0000] {taskinstance.py:731} INFO - ::endgroup::
[2025-05-01T15:18:44.968+0000] {conn.py:362} INFO - <BrokerConnection node_id=bootstrap-0 host=kafka:9091 <connecting> [IPv4 ('172.18.0.4', 9091)]>: connecting to kafka:9091 [('172.18.0.4', 9091) IPv4]
[2025-05-01T15:18:44.969+0000] {conn.py:957} INFO - Probing node bootstrap-0 broker version
[2025-05-01T15:18:44.970+0000] {conn.py:393} INFO - <BrokerConnection node_id=bootstrap-0 host=kafka:9091 <connecting> [IPv4 ('172.18.0.4', 9091)]>: Connection complete.
[2025-05-01T15:18:45.079+0000] {conn.py:1019} INFO - Broker version identified as 2.6.0
[2025-05-01T15:18:45.080+0000] {conn.py:1020} INFO - Set configuration api_version=(2, 6, 0) to skip auto check_version requests on startup
[2025-05-01T15:18:45.082+0000] {airflowDAG.py:411} INFO - Connected to broker
[2025-05-01T15:18:45.085+0000] {airflowDAG.py:415} INFO - Optimal plan {'schema': {'date': 'string', 'open_price': 'number', 'daily_high': 'number', 'daily_low': 'number', 'close_price': 'number', 'trade_volume_millions': 'number'}, 'plan': ['amazon_stock_data_source.csv', {'associated_key': None}, {'standardiseFeatures': '```python\n{\n    ("date",): ("date",),\n    ("open",): ("open_price",),\n    ("high",): ("daily_high",),\n    ("low",): ("daily_low",),\n    ("close",): ("close_price",),\n    ("volume",): ("trade_volume_millions",),\n    ("adj_close",): ()\n}\n```'}, 'missingValues/impute', 'duplicates', 'outliers/impute', {'standardiseValues': '```python\ndef transform_table(input_table):\n    if len(input_table) <= 1:\n        return input_table\n    \n    # Note: The column mapping seems to suggest a different set of columns than what\'s in the input.\n    # Working with the actual input column names.\n    \n    # Get header\n    header = input_table[0]\n    data_rows = input_table[1:]\n    \n    result = [header]\n    \n    for row in data_rows:\n        new_row = []\n        \n        # Process each column\n        for i, value in enumerate(row):\n            column_name = header[i]\n            \n            # Skip processing \'_ext_\' values\n            if value == \'_ext_\':\n                new_row.append(value)\n                continue\n                \n            # Process date column - convert to "YYYY/MM/DD" format\n            if column_name == \'date\' and value:\n                try:\n                    # Extract date part (first 10 chars) and reformat\n                    date_part = value.split(\' \')[0]\n                    components = date_part.split(\'-\')\n                    if len(components) == 3:\n                        new_row.append(f"{components[0]}/{components[1]}/{components[2]}")\n                    else:\n                        new_row.append(value)\n                except:\n                    new_row.append(value)\n            # Convert trade volume from absolute to millions\n            elif column_name == \'trade_volume_millions\' and value:\n                try:\n                    volume = float(value)\n                    # If volume is already in millions, keep as is\n                    # If it\'s in absolute units, convert to millions\n                    if volume > 1000000:\n                        new_row.append(f"{volume / 1000000:.3f}")\n                    else:\n                        new_row.append(f"{volume:.3f}")\n                except:\n                    new_row.append(value)\n            # Format numeric values with 3 decimal places\n            elif column_name in [\'open_price\', \'daily_high\', \'daily_low\', \'close_price\'] and value:\n                try:\n                    new_row.append(f"{float(value):.3f}")\n                except:\n                    new_row.append(value)\n            else:\n                new_row.append(value)\n                \n        result.append(new_row)\n    \n    return result\n```'}]} published to broker
[2025-05-01T15:18:45.086+0000] {kafka.py:486} INFO - Closing the Kafka producer with 9223372036.0 secs timeout.
[2025-05-01T15:18:45.086+0000] {conn.py:362} INFO - <BrokerConnection node_id=1001 host=kafka:9091 <connecting> [IPv4 ('172.18.0.4', 9091)]>: connecting to kafka:9091 [('172.18.0.4', 9091) IPv4]
[2025-05-01T15:18:45.087+0000] {conn.py:393} INFO - <BrokerConnection node_id=1001 host=kafka:9091 <connecting> [IPv4 ('172.18.0.4', 9091)]>: Connection complete.
[2025-05-01T15:18:45.088+0000] {conn.py:673} INFO - <BrokerConnection node_id=bootstrap-0 host=kafka:9091 <connected> [IPv4 ('172.18.0.4', 9091)]>: Closing connection. 
[2025-05-01T15:18:45.092+0000] {conn.py:673} INFO - <BrokerConnection node_id=1001 host=kafka:9091 <connected> [IPv4 ('172.18.0.4', 9091)]>: Closing connection. 
[2025-05-01T15:18:45.094+0000] {python.py:240} INFO - Done. Returned value was: None
[2025-05-01T15:18:45.102+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2025-05-01T15:18:45.103+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=PlanningEngine, task_id=publishOptimalPlan, run_id=manual__2025-05-01T15:11:04.438406+00:00, execution_date=20250501T151104, start_date=20250501T151844, end_date=20250501T151845
[2025-05-01T15:18:45.145+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2025-05-01T15:18:45.165+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-05-01T15:18:45.168+0000] {local_task_job_runner.py:245} INFO - ::endgroup::

[2025-05-01T15:33:45.907+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2025-05-01T15:33:45.922+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: PlanningEngine.InferTransformationLogic manual__2025-05-01T15:31:49.117784+00:00 [queued]>
[2025-05-01T15:33:45.929+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: PlanningEngine.InferTransformationLogic manual__2025-05-01T15:31:49.117784+00:00 [queued]>
[2025-05-01T15:33:45.931+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 2
[2025-05-01T15:33:45.943+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): InferTransformationLogic> on 2025-05-01 15:31:49.117784+00:00
[2025-05-01T15:33:45.949+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=453) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2025-05-01T15:33:45.951+0000] {standard_task_runner.py:72} INFO - Started process 454 to run task
[2025-05-01T15:33:45.951+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'PlanningEngine', 'InferTransformationLogic', 'manual__2025-05-01T15:31:49.117784+00:00', '--job-id', '3379', '--raw', '--subdir', 'DAGS_FOLDER/***DAG.py', '--cfg-path', '/tmp/tmp0neo44hz']
[2025-05-01T15:33:45.952+0000] {standard_task_runner.py:105} INFO - Job 3379: Subtask InferTransformationLogic
[2025-05-01T15:33:45.988+0000] {task_command.py:467} INFO - Running <TaskInstance: PlanningEngine.InferTransformationLogic manual__2025-05-01T15:31:49.117784+00:00 [running]> on host 29f5f6aefab8
[2025-05-01T15:33:46.050+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='PlanningEngine' AIRFLOW_CTX_TASK_ID='InferTransformationLogic' AIRFLOW_CTX_EXECUTION_DATE='2025-05-01T15:31:49.117784+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-05-01T15:31:49.117784+00:00'
[2025-05-01T15:33:46.051+0000] {taskinstance.py:731} INFO - ::endgroup::
[2025-05-01T15:33:46.092+0000] {airflowDAG.py:281} INFO - LLM Prompt : 

    You are given two tables represented as 2D lists: an input table and an output table. Your task is to write a Python function that transforms the input table into the output table.

    Your function must:
    - Perform the necessary data transformations to match the output table
    - Use the provided column mapping and schemas to guide your logic
    - Leave any cell with the value '_ext_' unchanged
    - Handle numeric operations carefully: convert strings to float before using them
    - If a cell contains `A|B`, you may split on `|` and use both values.
    - Assume column renaming and reordering is already done
    - Be named exactly `transform_table` since there are some other processes which expect this name

    Special mapping rules:
    - `("col1", "col2") -> ("new_col",)` means you should merge these two columns into one
    - `("col",) -> ("new_col",)` means this column was renamed (already done)
    - `("col",) -> ()` means this column was dropped — you don’t need to process it
    - `() -> ("new_col",)` means a new column was created — use other values to populate it
    - `("col1",) -> ("new_col1", "new_col2")` means this column is split into two new columns - use the original column values to populate them

    Important:
    - Return only a valid, executable Python function — no explanations, no comments
    - Your response will be evaluated by `exec()`, so the code must not contain errors
    - Your logic should generalize to similar tables — **do not hardcode, do not provide samples, and do not randomly generate cell values**.
    
    Generate the code for the following:

    Input Table: [['destination_longitude', 'source_airport_code', 'destination_latitude', 'source_longitude', 'source_latitude', 'destination_airport_code', 'source'], [19.2611, 'Rimini RMI', 47.4298, 12.6117, 44.0203, 'Budapest BUD', '_ext_'], [2.3794, 'Budapest BUD', 48.7233, 19.2611, 47.4298, 'Paris ORY', '_ext_'], [-2.275, 'Carcassonn CCF', 53.3537, 2.3063, 43.216, 'Manchester MAN', '_ext_'], [2.3794, 'Barcelona BCN', 48.7233, 2.0785, 41.2971, 'Paris ORY', '_ext_'], [-9.1359, 'Cologne CGN', 38.7813, 7.1427, 50.8659, 'Lisbon LIS', '_ext_'], [4.7639, 'Stockholm ARN', 52.3086, 17.9186, 59.6519, 'Amsterdam AMS', '_ext_'], [-7.9659, 'Leeds LBA', 37.0144, -1.6606, 53.8659, 'Faro FAO', '_ext_'], [7.6496, 'London STN', 45.2008, 0.235, 51.885, 'Turin TRN', '_ext_'], [24.4125, 'London LTN', 46.4677, -0.3683, 51.8747, 'Tirgu Mure TGM', '_ext_'], [19.7848, 'London LTN', 50.0777, -0.3683, 51.8747, 'Krakow KRK', '_ext_'], [9.7042, 'Budapest BUD', 45.6739, 19.2611, 47.4298, 'Milan BGY', '_ext_'], [-4.4185, 'Bastia BIA', 48.4479, 9.4837, 42.5527, 'Brest BES', '_ext_'], [5.2214, 'Rennes RNS', 43.4393, -1.7348, 48.0695, 'Marseille MRS', '_ext_'], [18.4662, 'Naples NAP', 54.3776, 14.2908, 40.886, 'Gdansk GDN', '_ext_'], [10.8885, 'Manchester MAN', 45.3957, -2.275, 53.3537, 'Verona VRN', '_ext_'], [17.9186, 'Warsaw WMI', 59.6519, 20.6518, 52.4511, 'Stockholm ARN', '_ext_'], [-8.9248, 'Fuertevent FUE', 52.702, -13.8638, 28.4527, 'Shannon SNN', '_ext_'], [16.7606, 'Barcelona GRO', 41.1389, 2.7606, 41.901, 'Bari BRI', '_ext_'], [14.4775, 'Cagliari CAG', 35.8575, 9.0543, 39.2515, 'Malta MLA', '_ext_'], [9.7042, 'Timisoara TSR', 45.6739, 21.3379, 45.8099, 'Milan BGY', '_ext_']]

    Output Table: [
    [
        "source_longitude",
        "source_latitude",
        "destination_latitude",
        "source_airport_code",
        "destination",
        "destination_longitude",
        "destination_airport_code",
        "source"
    ],
    [
        11.344,
        47.2602,
        51.1481,
        "INN",
        "London",
        -0.1903,
        "LGW",
        "Innsbruck"
    ],
    [
        11.344,
        47.2602,
        52.3086,
        "INN",
        "Amsterdam",
        4.7639,
        "AMS",
        "Innsbruck"
    ],
    [
        14.1875,
        48.2332,
        41.1389,
        "LNZ",
        "Bari",
        16.7606,
        "BRI",
        "Linz"
    ],
    [
        14.1875,
        48.2332,
        38.2822,
        "LNZ",
        "Alicante",
        -0.5582,
        "ALC",
        "Linz"
    ]
]

    Input Schema: {'destination_longitude': 'number', 'source_airport_code': 'string', 'destination_latitude': 'number', 'source_longitude': 'number', 'source_latitude': 'number', 'destination_airport_code': 'string', 'source': 'string'}

    Output Schema: {'source_longitude': 'boolean', 'source_latitude': 'boolean', 'destination_latitude': 'number', 'source_airport_code': 'boolean', 'destination': 'string', 'destination_longitude': 'number', 'destination_airport_code': 'string', 'source': 'boolean'}

    Column Mapping: {('src_lon',): ('source_longitude',), ('src_lat',): ('source_latitude',), ('dst_lat',): ('destination_latitude',), ('src',): ('source_airport_code',), ('dst',): ('destination_airport_code',), ('dst_lon',): ('destination_longitude',), (): ('source',)}

    Respond only with Python code — nothing else.  

[2025-05-01T15:33:55.742+0000] {python.py:240} INFO - Done. Returned value was: None
[2025-05-01T15:33:55.751+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2025-05-01T15:33:55.752+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=PlanningEngine, task_id=InferTransformationLogic, run_id=manual__2025-05-01T15:31:49.117784+00:00, execution_date=20250501T153149, start_date=20250501T153345, end_date=20250501T153355
[2025-05-01T15:33:56.002+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2025-05-01T15:33:56.021+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-05-01T15:33:56.024+0000] {local_task_job_runner.py:245} INFO - ::endgroup::

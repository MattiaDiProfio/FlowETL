[2025-05-01T15:33:57.329+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2025-05-01T15:33:57.343+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: PlanningEngine.publishOptimalPlan manual__2025-05-01T15:31:49.117784+00:00 [queued]>
[2025-05-01T15:33:57.351+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: PlanningEngine.publishOptimalPlan manual__2025-05-01T15:31:49.117784+00:00 [queued]>
[2025-05-01T15:33:57.352+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 2
[2025-05-01T15:33:57.363+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): publishOptimalPlan> on 2025-05-01 15:31:49.117784+00:00
[2025-05-01T15:33:57.369+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=459) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2025-05-01T15:33:57.370+0000] {standard_task_runner.py:72} INFO - Started process 460 to run task
[2025-05-01T15:33:57.371+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'PlanningEngine', 'publishOptimalPlan', 'manual__2025-05-01T15:31:49.117784+00:00', '--job-id', '3381', '--raw', '--subdir', 'DAGS_FOLDER/***DAG.py', '--cfg-path', '/tmp/tmph0uhw_qx']
[2025-05-01T15:33:57.372+0000] {standard_task_runner.py:105} INFO - Job 3381: Subtask publishOptimalPlan
[2025-05-01T15:33:57.407+0000] {task_command.py:467} INFO - Running <TaskInstance: PlanningEngine.publishOptimalPlan manual__2025-05-01T15:31:49.117784+00:00 [running]> on host 29f5f6aefab8
[2025-05-01T15:33:57.474+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='PlanningEngine' AIRFLOW_CTX_TASK_ID='publishOptimalPlan' AIRFLOW_CTX_EXECUTION_DATE='2025-05-01T15:31:49.117784+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-05-01T15:31:49.117784+00:00'
[2025-05-01T15:33:57.475+0000] {taskinstance.py:731} INFO - ::endgroup::
[2025-05-01T15:33:57.498+0000] {conn.py:362} INFO - <BrokerConnection node_id=bootstrap-0 host=kafka:9091 <connecting> [IPv4 ('172.18.0.4', 9091)]>: connecting to kafka:9091 [('172.18.0.4', 9091) IPv4]
[2025-05-01T15:33:57.499+0000] {conn.py:957} INFO - Probing node bootstrap-0 broker version
[2025-05-01T15:33:57.500+0000] {conn.py:393} INFO - <BrokerConnection node_id=bootstrap-0 host=kafka:9091 <connecting> [IPv4 ('172.18.0.4', 9091)]>: Connection complete.
[2025-05-01T15:33:57.608+0000] {conn.py:1019} INFO - Broker version identified as 2.6.0
[2025-05-01T15:33:57.609+0000] {conn.py:1020} INFO - Set configuration api_version=(2, 6, 0) to skip auto check_version requests on startup
[2025-05-01T15:33:57.611+0000] {airflowDAG.py:411} INFO - Connected to broker
[2025-05-01T15:33:57.612+0000] {airflowDAG.py:415} INFO - Optimal plan {'schema': {'destination_longitude': 'number', 'source_airport_code': 'string', 'destination_latitude': 'number', 'source_longitude': 'number', 'source_latitude': 'number', 'destination_airport_code': 'string', 'source': 'string'}, 'plan': ['flight_routes_source.json', {'associated_key': None}, {'standardiseFeatures': '```python\n{\n    ("src_lon",): ("source_longitude",),\n    ("src_lat",): ("source_latitude",),\n    ("dst_lat",): ("destination_latitude",),\n    ("src",): ("source_airport_code",),\n    ("dst",): ("destination_airport_code",),\n    ("dst_lon",): ("destination_longitude",),\n    (): ("destination",),\n    (): ("source",)\n}\n```'}, 'missingValues/impute', 'duplicates', 'outliers/impute', {'standardiseValues': '```python\ndef transform_table(input_table):\n    header = input_table[0]\n    data = input_table[1:]\n    \n    # Create the output header\n    output_header = ["source_longitude", "source_latitude", "destination_latitude", \n                    "source_airport_code", "destination", "destination_longitude", \n                    "destination_airport_code", "source"]\n    \n    # Create output data\n    output_data = []\n    \n    # Get column indices for easier access\n    src_lon_idx = header.index("source_longitude")\n    src_lat_idx = header.index("source_latitude")\n    dst_lat_idx = header.index("destination_latitude")\n    src_airport_idx = header.index("source_airport_code")\n    dst_airport_idx = header.index("destination_airport_code")\n    dst_lon_idx = header.index("destination_longitude")\n    src_idx = header.index("source")\n    \n    for row in data:\n        if row[src_idx] == "_ext_":\n            continue\n            \n        # Extract airport code and city from the format "City CODE"\n        src_airport_full = row[src_airport_idx].strip()\n        dst_airport_full = row[dst_airport_idx].strip()\n        \n        src_parts = src_airport_full.rsplit(\' \', 1)\n        dst_parts = dst_airport_full.rsplit(\' \', 1)\n        \n        src_city = src_parts[0] if len(src_parts) > 1 else src_airport_full\n        src_code = src_parts[1] if len(src_parts) > 1 else src_airport_full\n        \n        dst_city = dst_parts[0] if len(dst_parts) > 1 else dst_airport_full\n        dst_code = dst_parts[1] if len(dst_parts) > 1 else dst_airport_full\n        \n        # Create new row with transformed data\n        new_row = [\n            float(row[src_lon_idx]) if row[src_lon_idx] != "_ext_" else "_ext_",\n            float(row[src_lat_idx]) if row[src_lat_idx] != "_ext_" else "_ext_",\n            float(row[dst_lat_idx]) if row[dst_lat_idx] != "_ext_" else "_ext_",\n            src_code,\n            dst_city,\n            float(row[dst_lon_idx]) if row[dst_lon_idx] != "_ext_" else "_ext_",\n            dst_code,\n            src_city\n        ]\n        \n        output_data.append(new_row)\n    \n    return [output_header] + output_data\n```'}]} published to broker
[2025-05-01T15:33:57.614+0000] {kafka.py:486} INFO - Closing the Kafka producer with 9223372036.0 secs timeout.
[2025-05-01T15:33:57.614+0000] {conn.py:362} INFO - <BrokerConnection node_id=1001 host=kafka:9091 <connecting> [IPv4 ('172.18.0.4', 9091)]>: connecting to kafka:9091 [('172.18.0.4', 9091) IPv4]
[2025-05-01T15:33:57.615+0000] {conn.py:393} INFO - <BrokerConnection node_id=1001 host=kafka:9091 <connecting> [IPv4 ('172.18.0.4', 9091)]>: Connection complete.
[2025-05-01T15:33:57.616+0000] {conn.py:673} INFO - <BrokerConnection node_id=bootstrap-0 host=kafka:9091 <connected> [IPv4 ('172.18.0.4', 9091)]>: Closing connection. 
[2025-05-01T15:33:57.619+0000] {conn.py:673} INFO - <BrokerConnection node_id=1001 host=kafka:9091 <connected> [IPv4 ('172.18.0.4', 9091)]>: Closing connection. 
[2025-05-01T15:33:57.619+0000] {python.py:240} INFO - Done. Returned value was: None
[2025-05-01T15:33:57.627+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2025-05-01T15:33:57.628+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=PlanningEngine, task_id=publishOptimalPlan, run_id=manual__2025-05-01T15:31:49.117784+00:00, execution_date=20250501T153149, start_date=20250501T153357, end_date=20250501T153357
[2025-05-01T15:33:57.685+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2025-05-01T15:33:57.704+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-05-01T15:33:57.708+0000] {local_task_job_runner.py:245} INFO - ::endgroup::

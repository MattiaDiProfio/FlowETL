[2025-05-01T15:33:39.327+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2025-05-01T15:33:39.344+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: PlanningEngine.computeSchemaMap manual__2025-05-01T15:31:49.117784+00:00 [queued]>
[2025-05-01T15:33:39.354+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: PlanningEngine.computeSchemaMap manual__2025-05-01T15:31:49.117784+00:00 [queued]>
[2025-05-01T15:33:39.356+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 2
[2025-05-01T15:33:39.375+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): computeSchemaMap> on 2025-05-01 15:31:49.117784+00:00
[2025-05-01T15:33:39.381+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=444) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2025-05-01T15:33:39.383+0000] {standard_task_runner.py:72} INFO - Started process 445 to run task
[2025-05-01T15:33:39.384+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'PlanningEngine', 'computeSchemaMap', 'manual__2025-05-01T15:31:49.117784+00:00', '--job-id', '3376', '--raw', '--subdir', 'DAGS_FOLDER/***DAG.py', '--cfg-path', '/tmp/tmpkenrn__5']
[2025-05-01T15:33:39.386+0000] {standard_task_runner.py:105} INFO - Job 3376: Subtask computeSchemaMap
[2025-05-01T15:33:39.440+0000] {task_command.py:467} INFO - Running <TaskInstance: PlanningEngine.computeSchemaMap manual__2025-05-01T15:31:49.117784+00:00 [running]> on host 29f5f6aefab8
[2025-05-01T15:33:39.537+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='PlanningEngine' AIRFLOW_CTX_TASK_ID='computeSchemaMap' AIRFLOW_CTX_EXECUTION_DATE='2025-05-01T15:31:49.117784+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-05-01T15:31:49.117784+00:00'
[2025-05-01T15:33:39.539+0000] {taskinstance.py:731} INFO - ::endgroup::
[2025-05-01T15:33:39.571+0000] {airflowDAG.py:160} INFO - LLM Prompt : 

    You are given a list of source column headers and target column headers. Your task is to infer a plausible mapping from source to target columns.

    Rules:
    - At most two source attributes can be merged into one target attribute: represent this as `("s1", "s2"): ("t1")`
    - A source attribute may also be split into two target attributes: represent this as `("s1"): ("t1", "t2")`
    - If a source column is dropped, use an empty tuple as the value: `("s1"): ()`
    - If a target column is created, use an empty tuple as the key: `(): ("t1")`
    - Every source and target column can appear at most once in each mapping.

    Additional constraints:
    - Do not include placeholder values such as `None`
    - Ensure no duplicate keys in the output
    - Return a valid Python dictionary using tuple keys and values
    - Do not add any comments, explanations, or surrounding text

    Input:
    Source columns = ['dst_lon', 'src', 'dst_lat', 'src_lon', 'src_lat', 'dst']
    Target columns = ['source_longitude', 'source_latitude', 'destination_latitude', 'source_airport_code', 'destination', 'destination_longitude', 'destination_airport_code', 'source']

    Return your answer inside a Python code block in the following format:

    ```python
    { ("source1",): ("target1",), ... }
    ```
     

[2025-05-01T15:33:42.344+0000] {airflowDAG.py:180} INFO - LLM Response : 
```python
{
    ("src_lon",): ("source_longitude",),
    ("src_lat",): ("source_latitude",),
    ("dst_lat",): ("destination_latitude",),
    ("src",): ("source_airport_code",),
    ("dst",): ("destination_airport_code",),
    ("dst_lon",): ("destination_longitude",),
    (): ("destination",),
    (): ("source",)
}
``` 
 schema map = ```python
{
    ("src_lon",): ("source_longitude",),
    ("src_lat",): ("source_latitude",),
    ("dst_lat",): ("destination_latitude",),
    ("src",): ("source_airport_code",),
    ("dst",): ("destination_airport_code",),
    ("dst_lon",): ("destination_longitude",),
    (): ("destination",),
    (): ("source",)
}
```, type = <class 'str'>
[2025-05-01T15:33:42.367+0000] {python.py:240} INFO - Done. Returned value was: None
[2025-05-01T15:33:42.382+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2025-05-01T15:33:42.383+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=PlanningEngine, task_id=computeSchemaMap, run_id=manual__2025-05-01T15:31:49.117784+00:00, execution_date=20250501T153149, start_date=20250501T153339, end_date=20250501T153342
[2025-05-01T15:33:42.413+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2025-05-01T15:33:42.439+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-05-01T15:33:42.443+0000] {local_task_job_runner.py:245} INFO - ::endgroup::

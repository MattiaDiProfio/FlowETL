[2025-05-02T09:49:41.694+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2025-05-02T09:49:41.707+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: PlanningEngine.publishOptimalPlan manual__2025-05-02T09:48:42.370731+00:00 [queued]>
[2025-05-02T09:49:41.716+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: PlanningEngine.publishOptimalPlan manual__2025-05-02T09:48:42.370731+00:00 [queued]>
[2025-05-02T09:49:41.718+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 2
[2025-05-02T09:49:41.731+0000] {taskinstance.py:2889} INFO - Executing <Task(PythonOperator): publishOptimalPlan> on 2025-05-02 09:48:42.370731+00:00
[2025-05-02T09:49:41.737+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=157) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2025-05-02T09:49:41.738+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'PlanningEngine', 'publishOptimalPlan', 'manual__2025-05-02T09:48:42.370731+00:00', '--job-id', '3393', '--raw', '--subdir', 'DAGS_FOLDER/***DAG.py', '--cfg-path', '/tmp/tmprkgfkej0']
[2025-05-02T09:49:41.739+0000] {standard_task_runner.py:72} INFO - Started process 158 to run task
[2025-05-02T09:49:41.740+0000] {standard_task_runner.py:105} INFO - Job 3393: Subtask publishOptimalPlan
[2025-05-02T09:49:41.780+0000] {task_command.py:467} INFO - Running <TaskInstance: PlanningEngine.publishOptimalPlan manual__2025-05-02T09:48:42.370731+00:00 [running]> on host f31e97f3da01
[2025-05-02T09:49:41.845+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='PlanningEngine' AIRFLOW_CTX_TASK_ID='publishOptimalPlan' AIRFLOW_CTX_EXECUTION_DATE='2025-05-02T09:48:42.370731+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-05-02T09:48:42.370731+00:00'
[2025-05-02T09:49:41.846+0000] {taskinstance.py:731} INFO - ::endgroup::
[2025-05-02T09:49:41.867+0000] {conn.py:362} INFO - <BrokerConnection node_id=bootstrap-0 host=kafka:9091 <connecting> [IPv4 ('172.18.0.5', 9091)]>: connecting to kafka:9091 [('172.18.0.5', 9091) IPv4]
[2025-05-02T09:49:41.869+0000] {conn.py:957} INFO - Probing node bootstrap-0 broker version
[2025-05-02T09:49:41.870+0000] {conn.py:393} INFO - <BrokerConnection node_id=bootstrap-0 host=kafka:9091 <connecting> [IPv4 ('172.18.0.5', 9091)]>: Connection complete.
[2025-05-02T09:49:41.974+0000] {conn.py:1019} INFO - Broker version identified as 2.6.0
[2025-05-02T09:49:41.975+0000] {conn.py:1020} INFO - Set configuration api_version=(2, 6, 0) to skip auto check_version requests on startup
[2025-05-02T09:49:41.977+0000] {airflowDAG.py:411} INFO - Connected to broker
[2025-05-02T09:49:41.979+0000] {airflowDAG.py:415} INFO - Optimal plan {'schema': {'id': 'number', 'first_name': 'string', 'age': 'number', 'country_name': 'string', 'subscription': 'string', 'watch_time_hours': 'number', 'favourite_genre': 'string', 'last_access': 'string'}, 'plan': ['netflix_users_source.csv', {'associated_key': None}, {'standardiseFeatures': '```python\n{\n    ("User_ID",): ("id",),\n    ("Name",): ("first_name", "last_name"),\n    ("Age",): ("age",),\n    ("Country",): ("country_name",),\n    ("Subscription_Type",): ("subscription",),\n    ("Watch_Time_Hours",): ("watch_time_hours",),\n    ("Favorite_Genre",): ("favourite_genre",),\n    ("Last_Login",): ("last_access",)\n}\n```'}, 'missingValues/impute', 'duplicates', 'outliers/impute', {'standardiseValues': '```python\ndef transform_table(input_table):\n    output_table = [input_table[0]]\n    \n    # Process header row - add last_name column\n    if \'last_name\' not in output_table[0]:\n        first_name_index = output_table[0].index(\'first_name\')\n        output_table[0].insert(first_name_index + 1, \'last_name\')\n    \n    # Process data rows\n    for i in range(1, len(input_table)):\n        row = input_table[i].copy()\n        \n        # Split full name into first and last name if it exists\n        first_name_index = input_table[0].index(\'first_name\')\n        full_name = row[first_name_index]\n        \n        if full_name and \' \' in full_name:\n            names = full_name.split(\' \', 1)\n            row[first_name_index] = names[0]  # First name\n            # Insert last name after first name\n            row.insert(first_name_index + 1, names[1])\n        else:\n            # Insert empty last name if no full name exists\n            row.insert(first_name_index + 1, \'\')\n            \n        # Convert ID to integer if possible\n        id_index = input_table[0].index(\'id\')\n        if row[id_index] and row[id_index] != \'_ext_\':\n            try:\n                row[id_index] = str(int(float(row[id_index])))\n            except (ValueError, TypeError):\n                pass\n                \n        # Format the date to DD-MMM-YY if present\n        date_index = input_table[0].index(\'last_access\')\n        if row[date_index] and row[date_index] != \'_ext_\':\n            try:\n                year, month, day = row[date_index].split(\'-\')\n                months = [\'Jan\', \'Feb\', \'Mar\', \'Apr\', \'May\', \'Jun\', \'Jul\', \'Aug\', \'Sep\', \'Oct\', \'Nov\', \'Dec\']\n                month_abbr = months[int(month) - 1]\n                row[date_index] = f"{day}-{month_abbr}-{year[-2:]}"\n            except (ValueError, IndexError):\n                pass\n                \n        # Round watch time to nearest 10 if present\n        watch_time_index = input_table[0].index(\'watch_time_hours\')\n        if row[watch_time_index] and row[watch_time_index] != \'_ext_\':\n            try:\n                hours = float(row[watch_time_index])\n                row[watch_time_index] = str(round(hours / 10) * 10)\n            except (ValueError, TypeError):\n                pass\n                \n        # Convert age to string if it\'s a number\n        age_index = input_table[0].index(\'age\')\n        if row[age_index] and row[age_index] != \'_ext_\':\n            try:\n                age = float(row[age_index])\n                if age > 100:  # Assume this is in days and convert to years\n                    age = int(age / 365.25)\n                row[age_index] = str(int(age))\n            except (ValueError, TypeError):\n                pass\n                \n        output_table.append(row)\n            \n    return output_table\n```'}]} published to broker
[2025-05-02T09:49:41.980+0000] {kafka.py:486} INFO - Closing the Kafka producer with 9223372036.0 secs timeout.
[2025-05-02T09:49:41.980+0000] {conn.py:362} INFO - <BrokerConnection node_id=1001 host=kafka:9091 <connecting> [IPv4 ('172.18.0.5', 9091)]>: connecting to kafka:9091 [('172.18.0.5', 9091) IPv4]
[2025-05-02T09:49:41.982+0000] {conn.py:393} INFO - <BrokerConnection node_id=1001 host=kafka:9091 <connecting> [IPv4 ('172.18.0.5', 9091)]>: Connection complete.
[2025-05-02T09:49:41.982+0000] {conn.py:673} INFO - <BrokerConnection node_id=bootstrap-0 host=kafka:9091 <connected> [IPv4 ('172.18.0.5', 9091)]>: Closing connection. 
[2025-05-02T09:49:41.986+0000] {conn.py:673} INFO - <BrokerConnection node_id=1001 host=kafka:9091 <connected> [IPv4 ('172.18.0.5', 9091)]>: Closing connection. 
[2025-05-02T09:49:41.987+0000] {python.py:240} INFO - Done. Returned value was: None
[2025-05-02T09:49:41.995+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2025-05-02T09:49:41.996+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=PlanningEngine, task_id=publishOptimalPlan, run_id=manual__2025-05-02T09:48:42.370731+00:00, execution_date=20250502T094842, start_date=20250502T094941, end_date=20250502T094941
[2025-05-02T09:49:42.036+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2025-05-02T09:49:42.056+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-05-02T09:49:42.059+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
